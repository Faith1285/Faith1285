Menu
￼


￼
		Docs
		GitHub
Menu
Getting Started

Installing the CashScript compiler#
The command line CashScript compiler cashc can be installed from NPM.
Copy
npm install -g cashc

Installing the JavaScript SDK#
The JavaScript SDK can be installed into your project with NPM.
Copy
npm install cashscript
CAUTION
CashScript only offers a JavaScript SDK, but CashScript contracts can be integrated into other languages as well. Because there are no ready-to-use SDKs available for them, this is considered advanced usage, and it is recommended to use the JavaScript SDK.

Writing your first smart contract#
There are some examples available on the Examples page, that can be used to take inspiration from. Further examples of the JavaScript integration can be found on GitHub. A simple example is included below.
Copy
pragma cashscript ^0.6.0;

contract TransferWithTimeout(pubkey sender, pubkey recipient, int timeout) {
    // Allow the recipient to claim their received money
    function transfer(sig recipientSig) {
        require(checkSig(recipientSig, recipient));
    }

    // Allow the sender to reclaim their sent money after the timeout is reached
    function timeout(sig senderSig) {
        require(checkSig(senderSig, sender));
        require(tx.time >= timeout);
    }
}
TIP
Read more about the CashScript language syntax in the Language Description.

Integrating into JavaScript#
While more detailed examples are available on GitHub, we show an integration of the TransferWithTimeout contract in a JavaScript project.
After compiling the contract file to an artifact JSON with cashc, it can be imported into the CashScript SDK.
Copy
cashc ./transfer_with_timeout.cash --output ./transfer_with_timeout.json
Copy
const { ElectrumNetworkProvider, Contract, SignatureTemplate } = require('cashscript');
const { alice, bob, alicePk, bobPk } = require('./keys');

async function run() {
  // Import the TransferWithTimeout JSON artifact
  const artifact = require('./transfer_with_timeout.json');

  // Initialise a network provider for network operations
  const provider = new ElectrumNetworkProvider('mainnet');

  // Instantiate a new TransferWithTimeout contract
  const contract = new Contract(artifact, [alicePk, bobPk, 600000], provider);

  // Call the transfer function with Bob's signature
  // i.e. Bob claims the money that Alice has sent him
  const transferDetails = await contract.functions
    .transfer(new SignatureTemplate(bob))
    .to('bitcoincash:qrhea03074073ff3zv9whh0nggxc7k03ssh8jv9mkx', 10000)
    .send();
  console.log(transferDetails);

  // Call the timeout function with Alice's signature
  // i.e. Alice recovers the money that Bob has not claimed
  const timeoutDetails = await contract.functions
    .timeout(new SignatureTemplate(alice))
    .to('bitcoincash:qqeht8vnwag20yv8dvtcrd4ujx09fwxwsqqqw93w88', 10000)
    .send();
  console.log(timeoutDetails);
} johann Hulstrom
Yo.V.2ŒTH:BTC:3(3q)=btcQrpK25zmkL8SfHxBEBc9rvGFj66JHnG5j)(Apple Pay)(cashapp no private key )(need private key)(3qRPkv)2.5@0000.0000 